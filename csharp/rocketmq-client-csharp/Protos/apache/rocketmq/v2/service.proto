// Licensed to the Apache Software Foundation (ASF) under one or more
// contributor license agreements.  See the NOTICE file distributed with
// this work for additional information regarding copyright ownership.
// The ASF licenses this file to You under the Apache License, Version 2.0
// (the "License"); you may not use this file except in compliance with
// the License.  You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

syntax = "proto3";

import "google/protobuf/duration.proto";
import "google/protobuf/timestamp.proto";

import "apache/rocketmq/v2/definition.proto";

package apache.rocketmq.v2;

option csharp_namespace = "Apache.Rocketmq.V2";
option java_multiple_files = true;
option java_package = "apache.rocketmq.v2";
option java_generate_equals_and_hash = true;
option java_string_check_utf8 = true;
option java_outer_classname = "MQService";

// 主题是发布或订阅消息的目的地。类似于域名，通过提供的访问点解析后将是可寻址的。
//
// 访问点通常是名称服务器的地址，它们提供服务发现、负载均衡和其他辅助服务。名称服务器
// 接收来自附属代理的定期心跳，并清除那些未能保持活动状态的代理。
//
// 名称服务器回答QueryRouteRequest的查询，向客户端响应可寻址的消息队列，客户端可以直接向其发布消息或
// 从中订阅消息。
//
// QueryRouteRequest应包括源端点，即配置的访问点，它注释了租户ID、实例ID或其他
// 供应商特定的设置。专用名称服务器可能会根据这些特定要求响应自定义结果。
message QueryRouteRequest {
  Resource topic = 1;
  Endpoints endpoints = 2;
}

message QueryRouteResponse {
  Status status = 1;

  repeated MessageQueue message_queues = 2;
}

message SendMessageRequest {
  repeated Message messages = 1;
}

message SendResultEntry {
  Status status = 1;
  string message_id = 2;
  string transaction_id = 3;
  int64 offset = 4;
}

message SendMessageResponse {
  Status status = 1;

  // 一些实现可能存在部分失败问题。客户端SDK开发者应检查每个条目以确保最佳确定性。
  repeated SendResultEntry entries = 2;
}

message QueryAssignmentRequest {
  Resource topic = 1;
  Resource group = 2;
  Endpoints endpoints = 3;
}

message QueryAssignmentResponse {
  Status status = 1;
  repeated Assignment assignments = 2;
}

message ReceiveMessageRequest {
  Resource group = 1;
  MessageQueue message_queue = 2;
  FilterExpression filter_expression = 3;
  int32 batch_size = 4;
  // 如果客户端类型是简单消费者，则需要。
  optional google.protobuf.Duration invisible_duration = 5;
  // 用于消息自动续订和清理
  bool auto_renew = 6;
  optional google.protobuf.Duration long_polling_timeout = 7;
}

message ReceiveMessageResponse {
  oneof content {
    Status status = 1;
    Message message = 2;
    // 代理开始传递状态行或消息的时间戳。
    google.protobuf.Timestamp delivery_timestamp = 3;
  }
}

message AckMessageEntry {
  string message_id = 1;
  string receipt_handle = 2;
}

message AckMessageRequest {
  Resource group = 1;
  Resource topic = 2;
  repeated AckMessageEntry entries = 3;
}

message AckMessageResultEntry {
  string message_id = 1;
  string receipt_handle = 2;

  // 通过检查`status.code`获取确认结果；如果确认失败，`status.message`
  // 是失败的解释。
  Status status = 3;
}

message AckMessageResponse {

  // RPC层状态，用于表示包括认证、授权、限流和其他一般故障在内的RPC级错误。
  Status status = 1;

  repeated AckMessageResultEntry entries = 2;
}

message ForwardMessageToDeadLetterQueueRequest {
  Resource group = 1;
  Resource topic = 2;
  string receipt_handle = 3;
  string message_id = 4;
  int32 delivery_attempt = 5;
  int32 max_delivery_attempts = 6;
}

message ForwardMessageToDeadLetterQueueResponse { Status status = 1; }

message HeartbeatRequest {
  optional Resource group = 1;
  ClientType client_type = 2;
}

message HeartbeatResponse { Status status = 1; }

message EndTransactionRequest {
  Resource topic = 1;
  string message_id = 2;
  string transaction_id = 3;
  TransactionResolution resolution = 4;
  TransactionSource source = 5;
  string trace_context = 6;
}

message EndTransactionResponse { Status status = 1; }

message PrintThreadStackTraceCommand { string nonce = 1; }

message ThreadStackTrace {
  string nonce = 1;
  optional string thread_stack_trace = 2;
}

message VerifyMessageCommand {
  string nonce = 1;
  Message message = 2;
}

message VerifyMessageResult {
  string nonce = 1;
}

message RecoverOrphanedTransactionCommand {
  Message message = 1;
  string transaction_id = 2;
}

message TelemetryCommand {
  optional Status status = 1;

  oneof command {
    // 客户端设置
    Settings settings = 2;

    // 这些消息来自客户端。
    //
    // 向服务器报告线程堆栈跟踪。
    ThreadStackTrace thread_stack_trace = 3;

    // 向服务器报告消息验证结果。
    VerifyMessageResult verify_message_result = 4;

    // 这些消息来自服务器。
    //
    // 请求客户端恢复孤立的事务消息。
    RecoverOrphanedTransactionCommand recover_orphaned_transaction_command = 5;

    // 请求客户端打印线程堆栈跟踪。
    PrintThreadStackTraceCommand print_thread_stack_trace_command = 6;

    // 请求客户端验证指定消息的消费。
    VerifyMessageCommand verify_message_command = 7;
  }
}

message NotifyClientTerminationRequest {
  // 消费者组，生产者则无此项。
  optional Resource group = 1;
}

message NotifyClientTerminationResponse { Status status = 1; }

message ChangeInvisibleDurationRequest {
  Resource group = 1;
  Resource topic = 2;

  // 用于识别消息的唯一收据处理
  string receipt_handle = 3;

  // 新的不可见持续时间
  google.protobuf.Duration invisible_duration = 4;

  // 用于消息追踪
  string message_id = 5;
}

message ChangeInvisibleDurationResponse {
  Status status = 1;

  // 服务器可能为消息生成新的收据处理。
  string receipt_handle = 2;
}

// 对于MessagingService中的所有RPC，以下错误处理策略适用：
//
// 如果请求不携带有效的认证凭证，返回带有common.status.code == `UNAUTHENTICATED`的响应。如果经过认证的
// 用户未被授权执行请求的操作，返回带有common.status.code == `PERMISSION_DENIED`的响应。如果用户资源基础的
// 配额耗尽，返回带有common.status.code == `RESOURCE_EXHAUSTED`的响应。如果出现任何意外的服务器端错误，
// 返回带有common.status.code == `INTERNAL`的响应。
service MessagingService {

  // 查询给定端点视角下请求主题的路由条目。成功时，服务器应返回一组可寻址的消息队列。注意服务器可能会根据提供的端点返回自定义路由条目。
  //
  // 如果请求的主题不存在，返回`NOT_FOUND`。
  // 如果特定端点为空，返回`INVALID_ARGUMENT`。
  rpc QueryRoute(QueryRouteRequest) returns (QueryRouteResponse) {}

  // 生产者或消费者定期向服务器发送HeartbeatRequest以保持活动状态。此外，它还报告客户端配置，
  // 包括主题订阅、负载平衡组名称等。
  //
  // 如果成功，返回`OK`。
  //
  // 如果客户端指定的语言尚未得到服务器支持，返回`INVALID_ARGUMENT`
  rpc Heartbeat(HeartbeatRequest) returns (HeartbeatResponse) {}

  // 向代理传递消息。
  // 客户端可以进一步：
  // 1. 精确消息目的地到满足部分FIFO语义的消息队列；
  // 2. 将消息标记为事务性，使其对消费者不可见，直到提交；
  // 3. 定时消息，使其在指定时间点之前对消费者不可见；
  // 4. 等等...
  //
  // 成功时返回消息ID或事务ID，状态为`OK`。
  //
  // 如果目的地主题不存在，返回`NOT_FOUND`。
  rpc SendMessage(SendMessageRequest) returns (SendMessageResponse) {}

  // 查询当前消费者的主题分配的路由信息，返回的分配结果由服务器端负载均衡器决定。
  //
  // 如果相应的主题不存在，返回`NOT_FOUND`。
  // 如果特定端点为空，返回`INVALID_ARGUMENT`。
  rpc QueryAssignment(QueryAssignmentRequest) returns (QueryAssignmentResponse) {
  }

  // 以批量方式从服务器接收消息，如果成功，返回一组消息。收到的消息应在处理后确认或重新传递。
  //
  // 如果给定消费者组的挂起并发接收请求超过配额，返回`UNAVAILABLE`。如果上游存储服务器挂起，
  // 及时返回`DEADLINE_EXCEEDED`。如果相应的主题或消费者组不存在，返回`NOT_FOUND`。如果特定主题中没有新消息，
  // 返回`OK`并带有空消息集。请注意，客户端可能会遇到虚假空响应。
  //
  // 如果未能从远程接收消息，服务器必须仅返回一个`ReceiveMessageResponse`作为对请求的回复，其`Status`指示失败的具体原因，
  // 否则，回复被视为成功。
  rpc ReceiveMessage(ReceiveMessageRequest) returns (stream ReceiveMessageResponse) {
  }

  // 确认与`receipt_handle`或`offset`相关联的消息，表示消息已成功处理。如果消息服务器成功移除相关消息，返回`OK`。
  //
  // 如果给定的收据处理不合法或过时，返回`INVALID_ARGUMENT`。
  rpc AckMessage(AckMessageRequest) returns (AckMessageResponse) {}

  // 如果客户端一侧的消息超过最大传递尝试次数，将一条消息转发到死信队列，如果成功，返回`OK`。
  rpc ForwardMessageToDeadLetterQueue(ForwardMessageToDeadLetterQueueRequest)
      returns (ForwardMessageToDeadLetterQueueResponse) {}

  // 提交或回滚一条事务性消息。
  rpc EndTransaction(EndTransactionRequest) returns (EndTransactionResponse) {}

  // 一旦客户端启动，它将立即与代理建立双向流RPC，报告其设置为主动命令。
  //
  // 当服务器需要检查客户端状态时，它们会向客户端发出遥测命令。执行收到的指令后，
  // 客户端应通过客户端流报告命令执行结果。
  rpc Telemetry(stream TelemetryCommand) returns (stream TelemetryCommand) {}

  // 通知服务器客户端已终止。
  rpc NotifyClientTermination(NotifyClientTerminationRequest) returns (NotifyClientTerminationResponse) {
  }

  // 一旦消息从消费队列中检索出来代表该组，它将对同一组的其他客户端保持不可见一段时间。
  // 消息应在不可见持续时间内处理。如果负责不可见消息的客户端无法及时处理消息，它可以使用
  // ChangeInvisibleDuration来延长不可见持续时间。
  rpc ChangeInvisibleDuration(ChangeInvisibleDurationRequest) returns (ChangeInvisibleDurationResponse) {
  }
}